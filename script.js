const defchatid = PropertiesService.getScriptProperties().getProperty("defchatid");
const idmetrika = PropertiesService.getScriptProperties().getProperty("idmetrika");
const apidasha = PropertiesService.getScriptProperties().getProperty("apidasha");
const link = PropertiesService.getScriptProperties().getProperty("link");
const mailService = PropertiesService.getScriptProperties().getProperty("mailService");
 
function doPost(e) {
  let tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏');
  let update = JSON.parse(e.postData.contents);
  var chat_id1 = update.message.chat.id;
  
  if (chat_id1 == defchatid) {
    if (update.hasOwnProperty('message')) {
      handleMessage(update.message, tab);
    }
  } else {
    let msg = update.message;
    let chat_id = msg.chat.id;
    let text = msg.text;
    if (text == '–û–ª–µ–≥, –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É' && chat_id != defchatid) {
      send("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ —Å —Ç–∞–∫–∏–º–∏ —á–∞—Ç–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é" + chat_id + defchatid, chat_id);
    }
  }
}

function handleMessage(msg, tab) {
  let chat_id = msg.chat.id;
  let text = msg.text;
  let user = msg.from.username;
  let monthRow = findMonthRow(tab);

  switch (text) {
    case "–û–ª–µ–≥, –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É":
    case "/send":
    case "/send@peredvizhnikleadplanbot":
      send("–ö—Ä—É—Ç–æ, —á—Ç–æ –≤—ã —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É! –°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–≤–æ–¥—É —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é Reply to.", chat_id);
      send("–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏.", chat_id);
      break;
    case "–û–ª–µ–≥, –æ–±–Ω–æ–≤–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏":
      send("–ù–∞—á–∏–Ω–∞—é", chat_id);
      Olegobnovi(chat_id);
      break;
    case "–ì–¥–µ –¥–µ–Ω—å–≥–∏, –õ–µ–±–æ–≤—Å–∫–∏?":
      getMoney(chat_id);
      break;
    case "–û–ª–µ–≥, –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º":
      send("–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º. –í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–∏ –º–Ω–µ –¥–∞—Ç—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç. –í —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", chat_id);
      break;
  }

  if (msg.hasOwnProperty('reply_to_message')) {
    handleReply(msg, tab, monthRow);
  }
}

function handleReply(msg, tab, monthRow) {
  let chat_id = msg.chat.id;
  let text = msg.text;
  let reply = msg.reply_to_message.text;
  let num = monthRow + 1;

  function getColumnByName(name) {
    let headers = tab.getRange(1, 1, 1, tab.getLastColumn()).getValues()[0];
    return headers.indexOf(name) + 1;
  }

  switch (reply) {
    case "–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏.":
      insertRowAndSetValue(tab, num, getColumnByName("–¢–µ–º–∞ –ø–∏—Å—å–º–∞"), text, chat_id, "–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª! –ö–∞–∫–æ–π –±—ã–ª –ø—Ä–µ—Ö–µ–¥–µ—Ä?");
      break;
    case "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º. –í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–∏ –º–Ω–µ –¥–∞—Ç—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç. –í —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞":
      startdate(text, chat_id);
      break;
    case "–ò —Ç–µ–ø–µ—Ä—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞":
      Olegsay(text, chat_id);
      break;
    case "–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª! –ö–∞–∫–æ–π –±—ã–ª –ø—Ä–µ—Ö–µ–¥–µ—Ä?":
      setRowValues(tab, num, getColumnByName("–ü—Ä–µ—Ö–µ–¥–µ—Ä"), text, chat_id, "–ó–¥–æ—Ä–æ–≤–æ! –ï—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∑–∞—Ä–∞–Ω–µ–µ, –∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏.");
      tab.getRange(num, getColumnByName("–î–∞—Ç–∞")).setValue(Utilities.formatDate(new Date(), "GMT+1", "dd/MM/yyyy")).setFontWeight("normal");
      Utilities.sleep(3 * 1000)
      send("–í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–π–¥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", chat_id)
      break;
    case "–ó–¥–æ—Ä–æ–≤–æ! –ï—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∑–∞—Ä–∞–Ω–µ–µ, –∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏.":
      setRowValues(tab, num, getColumnByName("–î–∞—Ç–∞"), text, chat_id, "–û–∫–µ–π, –¥–∞—Ç—É –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª");
      break;
    case "–í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–π–¥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é":
      setRowValues(tab, num, getColumnByName("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∏—Å—å–º–æ"), "https://lk.dashamail.ru/stat/preview.php?m=test&campaign=" + text.split(',')[0].trim(), chat_id, "–ê–π–¥–∏ –∑–∞–ø–∏—Å–∞–ª. –°–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –ø–∏—Å—å–º–æ–º ü´¢");
      tab.getRange(num, getColumnByName("ID")).setValue(text).setFontWeight("normal");
      break;
    case "–ê–π–¥–∏ –∑–∞–ø–∏—Å–∞–ª. –°–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –ø–∏—Å—å–º–æ–º ü´¢":
      send("–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –ø–∏—Å—å–º–æ 10 —á–∞—Å–æ–≤ ü´®", chat_id);
      setRowValues(tab, num, getColumnByName("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏"), text, chat_id, "–ù–∞ –∫–∞–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É?");
      break;
    case "–ù–∞ –∫–∞–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É?":
      setRowValues(tab, num, getColumnByName("–°–µ–≥–º–µ–Ω—Ç"), text, chat_id, "–°–º–µ–ª–æ –ø–æ–¥–µ–ª–∏–ª–∏! –ê –∫–æ–º—É –Ω–µ —Å—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –Ø, –µ—Å–ª–∏ —á—Ç–æ, –ø—Ä–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è üòÉ");
      break;
    case "–°–º–µ–ª–æ –ø–æ–¥–µ–ª–∏–ª–∏! –ê –∫–æ–º—É –Ω–µ —Å—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –Ø, –µ—Å–ª–∏ —á—Ç–æ, –ø—Ä–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è üòÉ":
      setRowValues(tab, num, getColumnByName("–ß–∞—Å—Ç–æ—Ç–∞"), text, chat_id, "–ê–≥–∞, –ø—Ä–∏–Ω—è–ª. –û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞. –ü–µ—Ä–≤—ã–π ‚Äî –æ—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É?");
      break;
    case "–ê–≥–∞, –ø—Ä–∏–Ω—è–ª. –û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞. –ü–µ—Ä–≤—ã–π ‚Äî –æ—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É?":
      setRowValues(tab, num, getColumnByName("–û—Ç –∫–æ–≥–æ"), text, chat_id, "–ü—Ä–∏–Ω—è–ª. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –∫–∞–∫–∞—è UTM —É —Ä–∞—Å—Å—ã–ª–∫–∏? –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.");
      break;
    case "–ü—Ä–∏–Ω—è–ª. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –∫–∞–∫–∞—è UTM —É —Ä–∞—Å—Å—ã–ª–∫–∏? –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.":
      setRowValues(tab, num, getColumnByName("UTM"), text, chat_id, "–û—Ç–ª–∏—á–Ω–æ! –Ø –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª –∏ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ–∂—É –∑–∞ —Ä–∞—Å—Å—ã–ª–∫–æ–π üôÇ");
      break;
    case "–û–ª–µ–≥, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ç–∞—Ä–∏—Ñ?":
      checkTariff(chat_id);
      break;
  }
}


function insertRowAndSetValue(sheet, row, col, value, chat_id, nextMessage) {
  sheet.insertRowAfter(row - 1);
  let cell = sheet.getRange(row, col);
  cell.setValue(value).setFontWeight("normal");
  send(nextMessage, chat_id);
}

function setRowValues(sheet, row, col, value, chat_id, nextMessage) {
  let cell = sheet.getRange(row, col);
  cell.setValue(value).setFontWeight("normal");
  send(nextMessage, chat_id);
}

function findMonthRow(sheet) {
  let lastRow = sheet.getLastRow();
  for (let i = 1; i <= lastRow; i++) {
    let cellValue = sheet.getRange(i, 1).getValue();
    if (typeof cellValue === 'string' && cellValue.includes('2024')) {
      return i;
    }
  }
  send(lastRow, "-1001500240126")
  return lastRow;
}



function getMoney(chat_id) {
  var headers = {
    "Cookie": "JSESSIONID=node0ijangw7bbymi1kfdubsb7gxkl13117369.node0",
    "Authorization": "OAuth"
  };

  var options = {
    'method': 'get',
    'headers': headers,
    'redirect': 'follow'
  };

  var today = new Date();
  var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
  var date1 = Utilities.formatDate(firstDay, "GMT+0600", "yyyy-MM-dd");
  var answer = UrlFetchApp.fetch("https://api-metrika.yandex.net/stat/v1/data/bytime?id=" + idmetrika + "&metrics=ym:s:ecommerceRevenue,ym:s:ecommercePurchases&filters=ym:s:cross_device_last_significantUTMMedium=='email'&date1=" + date1 + "&group=all&accuracy=1&attribution=cross_device_last_significant&cross_device=true", options);
  var dann = JSON.parse(answer.getContentText());
  income = Number(dann.totals[[0]]);
  purchase = Number(dann.totals[[1]]);
  if (income != 0) {
    income = formatNumber(income);
    var purchaseText = pluralize(purchase);
    send("üí∏ –î–µ–Ω—å–≥–∏ ‚Äî –µ—Å—Ç—å. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–µ—Ä—à–∏–ª–∏ " + purchaseText + " –Ω–∞ " + income + " ‚ÇΩ. –†–∞–¥, —á—Ç–æ –≤–∞—à–∏ –ø–∏—Å—å–º–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ç–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ü•∞", chat_id);
  } else {
    send("–î–µ–Ω–µ–≥ –Ω–µ—Ç. –ù–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤–∏–Ω–æ–π –≤—Å–µ–º—É —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π, –∞ –Ω–µ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ‚ù§Ô∏è", chat_id);
  }
}

function checkTariff(chat_id) {
  var apiUrl = "https://api.dashamail.ru/?method=account.get_balance&api_key=" + apidasha;

  var response = UrlFetchApp.fetch(apiUrl);
  var data = JSON.parse(response.getContentText());
  var expirationDate = data.response.data.expiration_date;
  var parts = expirationDate.split(' ');
  var dateParts = parts[0].split('.');
  var timeParts = parts[1].split(':');
  var expirationDateTime = new Date(
    parseInt(dateParts[2]),
    parseInt(dateParts[1]) - 1,
    parseInt(dateParts[0]),
    parseInt(timeParts[0]),
    parseInt(timeParts[1]),
    parseInt(timeParts[2])
  );
  var daysRemaining = Math.ceil((expirationDateTime - new Date()) / (1000 * 60 * 60 * 24));
  var daysword = pluralizeday(daysRemaining);
  var daysword1 = getVerb(daysRemaining);
  var message = "–î–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ " + daysword1 + " " + daysword;
  send(message, chat_id);
}

function getMoney(chat_id) {
  var headers = {
    "Cookie": "JSESSIONID=node0ijangw7bbymi1kfdubsb7gxkl13117369.node0",
    "Authorization": "OAuth"
  };

  var options = {
    'method': 'get',
    'headers': headers,
    'redirect': 'follow'
  };

  var today = new Date();
  var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
  var date1 = Utilities.formatDate(firstDay, "GMT+0600", "yyyy-MM-dd");
  var answer = UrlFetchApp.fetch("https://api-metrika.yandex.net/stat/v1/data/bytime?id=" + idmetrika + "&metrics=ym:s:ecommerceRevenue,ym:s:ecommercePurchases&filters=ym:s:cross_device_last_significantUTMMedium=='email'&date1=" + date1 + "&group=all&accuracy=1&attribution=cross_device_last_significant&cross_device=true", options);
  var dann = JSON.parse(answer.getContentText());
  income = Number(dann.totals[[0]]);
  purchase = Number(dann.totals[[1]]);
  if (income != 0) {
    income = formatNumber(income);
    var purchaseText = pluralize(purchase);
    send("üí∏ –î–µ–Ω—å–≥–∏ ‚Äî –µ—Å—Ç—å. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–µ—Ä—à–∏–ª–∏ " + purchaseText + " –Ω–∞ " + income + " ‚ÇΩ. –†–∞–¥, —á—Ç–æ –≤–∞—à–∏ –ø–∏—Å—å–º–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ç–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ü•∞", chat_id);
  } else {
    send("–î–µ–Ω–µ–≥ –Ω–µ—Ç. –ù–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤–∏–Ω–æ–π –≤—Å–µ–º—É —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π, –∞ –Ω–µ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ‚ù§Ô∏è", chat_id);
  }
}

function checkTariff(chat_id) {
  var apiUrl = "https://api.dashamail.ru/?method=account.get_balance&api_key=" + apidasha;

  var response = UrlFetchApp.fetch(apiUrl);
  var data = JSON.parse(response.getContentText());
  var expirationDate = data.response.data.expiration_date;
  var parts = expirationDate.split(' ');
  var dateParts = parts[0].split('.');
  var timeParts = parts[1].split(':');
  var expirationDateTime = new Date(
    parseInt(dateParts[2]),
    parseInt(dateParts[1]) - 1,
    parseInt(dateParts[0]),
    parseInt(timeParts[0]),
    parseInt(timeParts[1]),
    parseInt(timeParts[2])
  );
  var daysRemaining = Math.ceil((expirationDateTime - new Date()) / (1000 * 60 * 60 * 24));
  var daysword = pluralizeday(daysRemaining);
  var daysword1 = getVerb(daysRemaining);
  var message = "–î–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ " + daysword1 + " " + daysword;
  send(message, chat_id);
}

function getMoney(chat_id) {
  var headers = {
    "Cookie": "JSESSIONID=node0ijangw7bbymi1kfdubsb7gxkl13117369.node0",
    "Authorization": "OAuth"
  };

  var options = {
    'method': 'get',
    'headers': headers,
    'redirect': 'follow'
  };

  var today = new Date();
  var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
  var date1 = Utilities.formatDate(firstDay, "GMT+0600", "yyyy-MM-dd");
  var answer = UrlFetchApp.fetch("https://api-metrika.yandex.net/stat/v1/data/bytime?id=" + idmetrika + "&metrics=ym:s:ecommerceRevenue,ym:s:ecommercePurchases&filters=ym:s:cross_device_last_significantUTMMedium=='email'&date1=" + date1 + "&group=all&accuracy=1&attribution=cross_device_last_significant&cross_device=true", options);
  var dann = JSON.parse(answer.getContentText());
  income = Number(dann.totals[[0]]);
  purchase = Number(dann.totals[[1]]);
  if (income != 0) {
    income = formatNumber(income);
    var purchaseText = pluralize(purchase);
    send("üí∏ –î–µ–Ω—å–≥–∏ ‚Äî –µ—Å—Ç—å. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–µ—Ä—à–∏–ª–∏ " + purchaseText + " –Ω–∞ " + income + " ‚ÇΩ. –†–∞–¥, —á—Ç–æ –≤–∞—à–∏ –ø–∏—Å—å–º–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ç–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ü•∞", chat_id);
  } else {
    send("–î–µ–Ω–µ–≥ –Ω–µ—Ç. –ù–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤–∏–Ω–æ–π –≤—Å–µ–º—É —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π, –∞ –Ω–µ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ‚ù§Ô∏è", chat_id);
  }
}

function checkTariff(chat_id) {
  var apiUrl = "https://api.dashamail.ru/?method=account.get_balance&api_key=" + apidasha;

  var response = UrlFetchApp.fetch(apiUrl);
  var data = JSON.parse(response.getContentText());
  var expirationDate = data.response.data.expiration_date;
  var parts = expirationDate.split(' ');
  var dateParts = parts[0].split('.');
  var timeParts = parts[1].split(':');
  var expirationDateTime = new Date(
    parseInt(dateParts[2]),
    parseInt(dateParts[1]) - 1,
    parseInt(dateParts[0]),
    parseInt(timeParts[0]),
    parseInt(timeParts[1]),
    parseInt(timeParts[2])
  );
  var daysRemaining = Math.ceil((expirationDateTime - new Date()) / (1000 * 60 * 60 * 24));
  var daysword = pluralizeday(daysRemaining);
  var daysword1 = getVerb(daysRemaining);
  var message = "–î–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ " + daysword1 + " " + daysword;
  send(message, chat_id);
}


function getMoney(chat_id) {
  var headers = {
    "Cookie": "JSESSIONID=node0ijangw7bbymi1kfdubsb7gxkl13117369.node0",
    "Authorization": "OAuth"
  };

  var options = {
    'method': 'get',
    'headers': headers,
    'redirect': 'follow'
  };

  var today = new Date();
  var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
  var date1 = Utilities.formatDate(firstDay, "GMT+0600", "yyyy-MM-dd");
  var answer = UrlFetchApp.fetch("https://api-metrika.yandex.net/stat/v1/data/bytime?id=" + idmetrika + "&metrics=ym:s:ecommerceRevenue,ym:s:ecommercePurchases&filters=ym:s:cross_device_last_significantUTMMedium=='email'&date1=" + date1 + "&group=all&accuracy=1&attribution=cross_device_last_significant&cross_device=true", options);
  var dann = JSON.parse(answer.getContentText());
  income = Number(dann.totals[[0]]);
  purchase = Number(dann.totals[[1]]);
  if (income != 0) {
    income = formatNumber(income);
    var purchaseText = pluralize(purchase);
    send("üí∏ –î–µ–Ω—å–≥–∏ ‚Äî –µ—Å—Ç—å. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–µ—Ä—à–∏–ª–∏ " + purchaseText + " –Ω–∞ " + income + " ‚ÇΩ. –†–∞–¥, —á—Ç–æ –≤–∞—à–∏ –ø–∏—Å—å–º–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ç–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ü•∞", chat_id);
  } else {
    send("–î–µ–Ω–µ–≥ –Ω–µ—Ç. –ù–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤–∏–Ω–æ–π –≤—Å–µ–º—É —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π, –∞ –Ω–µ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ‚ù§Ô∏è", chat_id);
  }
}

function checkTariff(chat_id) {
  var apiUrl = "https://api.dashamail.ru/?method=account.get_balance&api_key=" + apidasha;

  var response = UrlFetchApp.fetch(apiUrl);
  var data = JSON.parse(response.getContentText());
  var expirationDate = data.response.data.expiration_date;
  var parts = expirationDate.split(' ');
  var dateParts = parts[0].split('.');
  var timeParts = parts[1].split(':');
  var expirationDateTime = new Date(
    parseInt(dateParts[2]),
    parseInt(dateParts[1]) - 1,
    parseInt(dateParts[0]),
    parseInt(timeParts[0]),
    parseInt(timeParts[1]),
    parseInt(timeParts[2])
  );
  var daysRemaining = Math.ceil((expirationDateTime - new Date()) / (1000 * 60 * 60 * 24));
  var daysword = pluralizeday(daysRemaining);
  var daysword1 = getVerb(daysRemaining);
  var message = "–î–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ " + daysword1 + " " + daysword;
  send(message, chat_id);
}

function send(msg, chat_id) {
  var payload = {
    'chat_id': chat_id,
    'message': msg
  };

  var options = {
    'method': 'post',
    'contentType': 'application/json',
    'payload': JSON.stringify(payload)
  };

  var response = UrlFetchApp.fetch('https://amp.kinetica.su/timeplantable/olegsend.php', options);
}



function autodate() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏');
  var values = sheet.getDataRange().getValues();
  
  var headers = values[0];
  
  var columnIndexes = {
    id: headers.indexOf("ID"),
    datecheck: headers.indexOf("–î–∞—Ç–∞"),
    sent: headers.indexOf("–û—Ç–ø—Ä–∞–≤–æ–∫"),
    opened: headers.indexOf("–û—Ç–∫—Ä—ã—Ç–∏–π"),
    openRate: headers.indexOf("Open Rate"),
    clicked: headers.indexOf("–ö–ª–∏–∫–æ–≤"),
    clickRate: headers.indexOf("Click Rate"),
    unsubscribed: headers.indexOf("–û—Ç–ø–∏—Å–æ–∫"),
    unsubRate: headers.indexOf("Unsub Rate"),
    complained: headers.indexOf("–ê–±—å—é–∑–æ–≤"),
    abuseRate: headers.indexOf("–ê–±—å—é–∑ Rate"),
    preview: headers.indexOf("–ü—Ä–µ–≤—å—é"),
    bounced: headers.indexOf("–ë–∞—É–Ω—Å–æ–≤"),
    bouncedRate: headers.indexOf("–ë–∞—É–Ω—Å Rate"),
  };

  var fiveMonthsAgo = new Date();
  fiveMonthsAgo.setMonth(fiveMonthsAgo.getMonth() - 3);

  values.forEach(function(row, rowIndex) {
    if (rowIndex > 1) {
      var id = row[columnIndexes.id];
      var datecheck = row[columnIndexes.datecheck];

      if (datecheck > fiveMonthsAgo.getTime()) {
        var ids = `${id}`.indexOf(',') > -1 ? id.split(', ') : [id];
        var stats = { sent: 0, opened: 0, clicked: 0, unsubscribed: 0, complained: 0, preview: 0, bounced: 0 };

        ids.forEach(function(item) {
          var options = { 'method': 'get', 'redirect': 'follow' };
          var answer = UrlFetchApp.fetch('https://api.dashamail.com?api_key=' + apidasha + '&campaign_id=' + item + '&method=reports.summary', options);
          var data = JSON.parse(answer.getContentText()).response.data;
          stats.sent += Number(data.sent);
          stats.opened += Number(data.unique_opened);
          stats.clicked += Number(data.unique_clicked);
          stats.unsubscribed += Number(data.unsubscribed);
          stats.complained += Number(data.complained);
          stats.preview += Number(data.preview);
          
          // –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ blk + hard + soft –¥–ª—è bounced
          stats.bounced += Number(data.blk) + Number(data.hard) + Number(data.soft);
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —è—á–µ–π–∫–∞—Ö
        Object.keys(stats).forEach(function(stat) {
          var index = columnIndexes[stat];
          if (index !== -1) {
            sheet.getRange(rowIndex + 1, index + 1).setValue(stats[stat]);
          }
        });

        // –§–æ—Ä–º—É–ª—ã –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        var setFormula = function(numeratorIndex, denominatorIndex, formulaIndex) {
          if (numeratorIndex !== -1 && denominatorIndex !== -1 && formulaIndex !== -1) {
            sheet.getRange(rowIndex + 1, formulaIndex + 1).setFormula(`=${sheet.getRange(rowIndex + 1, numeratorIndex + 1).getA1Notation()}/${sheet.getRange(rowIndex + 1, denominatorIndex + 1).getA1Notation()}`);
          }
        };
        
        setFormula(columnIndexes.opened, columnIndexes.sent, columnIndexes.openRate);
        setFormula(columnIndexes.clicked, columnIndexes.sent, columnIndexes.clickRate);
        setFormula(columnIndexes.unsubscribed, columnIndexes.sent, columnIndexes.unsubRate);
        setFormula(columnIndexes.complained, columnIndexes.sent, columnIndexes.abuseRate);
        setFormula(columnIndexes.bounced, columnIndexes.sent, columnIndexes.bouncedRate);
      }
    }
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
  var formatColumn = function(index, format) {
    if (index !== -1) {
      sheet.getRange(2, index + 1, sheet.getLastRow() - 1).setNumberFormat(format);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
  formatColumn(columnIndexes.openRate, '0.00%');
  formatColumn(columnIndexes.clickRate, '0.00%');
  formatColumn(columnIndexes.unsubRate, '0.00%');
  formatColumn(columnIndexes.abuseRate, '0.00%');
  formatColumn(columnIndexes.bouncedRate, '0.00%');

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–µ–ª
  formatColumn(columnIndexes.sent, '[<10000]0;[>=10000]#,###');
  formatColumn(columnIndexes.opened, '[<10000]0;[>=10000]#,###');
  formatColumn(columnIndexes.clicked, '[<10000]0;[>=10000]#,###');
  formatColumn(columnIndexes.unsubscribed, '[<10000]0;[>=10000]#,###');
  formatColumn(columnIndexes.complained, '[<10000]0;[>=10000]#,###');
  formatColumn(columnIndexes.preview, '[<10000]0;[>=10000]#,###');
  formatColumn(columnIndexes.bounced, '[<10000]0;[>=10000]#,###');
}



function metrika() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏');
  var values = sheet.getDataRange().getValues();

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
  var formatColumn = function(index, format) {
    if (index !== -1) {
      sheet.getRange(2, index + 1, sheet.getLastRow() - 1).setNumberFormat(format);
    }
  };
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
  var headers = values[0]; // –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ - –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  var columnIndexes = {
    utm: headers.indexOf("UTM"),
    datecheck: headers.indexOf("–î–∞—Ç–∞"),
    orders: headers.indexOf("–ó–∞–∫–∞–∑–æ–≤"),  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    income: headers.indexOf("–î–æ—Ö–æ–¥"),   // –î–æ—Ö–æ–¥
    clicks: headers.indexOf("–ö–ª–∏–∫–æ–≤"),   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
    cost: headers.indexOf("–°—Ç–æ–∏–º–æ—Å—Ç—å"),  // –°—Ç–æ–∏–º–æ—Å—Ç—å
    cpa: headers.indexOf("CPA"),
    cr: headers.indexOf("CR")
  };

  // –ù–∞–π–¥–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –≤ —Ç–∞–±–ª–∏—Ü–µ
  var earliestDate = new Date();
  values.slice(1).forEach(function(row) {
    var rowDate = new Date(row[columnIndexes.datecheck]);
    if (rowDate < earliestDate) {
      earliestDate = rowDate;
    }
  });
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
  var formattedDate = Utilities.formatDate(earliestDate, Session.getScriptTimeZone(), "yyyy-MM-dd");

  values.forEach(function(row, rowIndex) {
    if (rowIndex !== 0) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      var utm = row[columnIndexes.utm];
      var datecheck = row[columnIndexes.datecheck];

      var fiveMonthsAgo = new Date();
      fiveMonthsAgo.setMonth(fiveMonthsAgo.getMonth() - 3); // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ

      if (utm && datecheck > fiveMonthsAgo) {  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π
        var utmValues = utm.indexOf(',') > -1 ? utm.split(', ') : [utm]; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö UTM

        utmValues.forEach(function(item) {
          var headers = {
            "Cookie": "JSESSIONID=node0ijangw7bbymi1kfdubsb7gxkl13117369.node0",
            "Authorization": "OAuth"
          };

          var options = {
            'method': 'get',
            'headers': headers,
            'redirect': 'follow'
          };

          var apiUrl = "https://api-metrika.yandex.net/stat/v1/data/bytime?id=" + idmetrika +
            "&metrics=ym:s:ecommerceRevenue,ym:s:ecommercePurchases" +
            "&filters=ym:s:cross_device_last_significantUTMCampaign=='" + item + "'" +
            "&date1=" + formattedDate + // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É
            "&group=all&accuracy=1&attribution=cross_device_last_significant&cross_device=true";

          var answer = UrlFetchApp.fetch(apiUrl, options);
          var dann = JSON.parse(answer.getContentText());
          
          var totalIncome = Number(dann.totals[0]);
          var totalPurchase = Number(dann.totals[1]);
          
          var rowIndex1 = rowIndex + 1;
          
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ "–ó–∞–∫–∞–∑—ã" –∏ "–î–æ—Ö–æ–¥"
          sheet.getRange(rowIndex1, columnIndexes.orders + 1).setValue(totalPurchase);
          sheet.getRange(rowIndex1, columnIndexes.income + 1).setValue(totalIncome);
          
          // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è "CR" –∏ "CPA" –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
          if (columnIndexes.clicks !== -1) {
            // –î–ª—è CR —Ñ–æ—Ä–º—É–ª–∞: –ó–∞–∫–∞–∑—ã / –ö–ª–∏–∫–æ–≤
            var crFormula = '=IF(' + sheet.getRange(rowIndex1, columnIndexes.clicks + 1).getA1Notation() + '>0; ' + sheet.getRange(rowIndex1, columnIndexes.orders + 1).getA1Notation() + ' / ' + sheet.getRange(rowIndex1, columnIndexes.clicks + 1).getA1Notation() + '; 0)';
            sheet.getRange(rowIndex1, columnIndexes.cr + 1 ).setFormula(crFormula); // CR –≤ —Å–æ—Å–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –æ—Ç –ó–∞–∫–∞–∑–æ–≤
          }

          if (columnIndexes.cost !== -1) {
            // –î–ª—è CPA —Ñ–æ—Ä–º—É–ª–∞: –î–æ—Ö–æ–¥ / –°—Ç–æ–∏–º–æ—Å—Ç—å
            var cpaFormula = '=IF(' + sheet.getRange(rowIndex1, columnIndexes.cost + 1).getA1Notation() + '>0; ' + sheet.getRange(rowIndex1, columnIndexes.income + 1).getA1Notation() + ' / ' + sheet.getRange(rowIndex1, columnIndexes.cost + 1).getA1Notation() + '; 0)';
            sheet.getRange(rowIndex1, columnIndexes.cpa + 1).setFormula(cpaFormula); // CPA –≤ —Å–æ—Å–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –æ—Ç –°—Ç–æ–∏–º–æ—Å—Ç–∏
          }

          formatColumn(columnIndexes.orders, '[<10000]0;[>=10000]#,###');
          formatColumn(columnIndexes.income, '[<10000]0 ‚ÇΩ;[>=10000]#,### ‚ÇΩ');
          formatColumn(columnIndexes.cpa, '[<10000]0 ‚ÇΩ;[>=10000]#,### ‚ÇΩ');
          formatColumn(columnIndexes.cr, '0.00%');
        });
      }
    }
  });
}






function Olegsend() {
  // autodate();
  // metrika();
  
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏');
  var values = sheet.getDataRange().getValues();
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  var headers = values[0];
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
  var columnIndexes = {
    datepismo: headers.indexOf("–î–∞—Ç–∞"),
    subject: headers.indexOf("–¢–µ–º–∞ –ø–∏—Å—å–º–∞"),
    link: headers.indexOf("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∏—Å—å–º–æ"),
    income: headers.indexOf("–î–æ—Ö–æ–¥"),
    sended: headers.indexOf("–û—Ç–ø—Ä–∞–≤–æ–∫"),
    open: headers.indexOf("–û—Ç–∫—Ä—ã—Ç–∏–π"),
    openrate: headers.indexOf("Open Rate"),
    click: headers.indexOf("–ö–ª–∏–∫–æ–≤"),
    clickrate: headers.indexOf("Click Rate"),
    unsub: headers.indexOf("–û—Ç–ø–∏—Å–æ–∫"),
    unsubrate: headers.indexOf("Unsub Rate"),
    spam: headers.indexOf("–ê–±—å—é–∑–æ–≤"),
    spamrate: headers.indexOf("–ê–±—å—é–∑ Rate"),
    orderrate: headers.indexOf("CR"),
    order: headers.indexOf("–ó–∞–∫–∞–∑–æ–≤"),
    campaignId: headers.indexOf("ID"),
    bounce: headers.indexOf("–ë–∞—É–Ω—Å–æ–≤"),
    bouncerate: headers.indexOf("–ë–∞—É–Ω—Å Rate")
  };
  
  values.forEach(function(row, rowIndex) {
    if (rowIndex !== 0) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      var datepismo = row[columnIndexes.datepismo];
      let d = new Date();
      var data = d.setDate(d.getDate() - 5); // –î–∞—Ç–∞ 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      if (datepismo >= data) {
        var income = columnIndexes.income !== -1 ? formatNumber(row[columnIndexes.income]) : '';
        var subject = columnIndexes.subject !== -1 ? row[columnIndexes.subject] : '';
        var sended = columnIndexes.sended !== -1 ? formatNumber(row[columnIndexes.sended]) : '';
        var open = columnIndexes.open !== -1 ? formatNumber(row[columnIndexes.open]) : '';
        var openrate = columnIndexes.openrate !== -1 ? (row[columnIndexes.openrate] * 100).toFixed(2) : '';
        var click = columnIndexes.click !== -1 ? formatNumber(row[columnIndexes.click]) : '';
        var clickrate = columnIndexes.clickrate !== -1 ? (row[columnIndexes.clickrate] * 100).toFixed(2) : '';
        var unsub = columnIndexes.unsub !== -1 ? formatNumber(row[columnIndexes.unsub]) : '';
        var unsubrate = columnIndexes.unsubrate !== -1 ? (row[columnIndexes.unsubrate] * 100).toFixed(2) : '';
        var spam = columnIndexes.spam !== -1 ? formatNumber(row[columnIndexes.spam]) : '';
        var spamrate = columnIndexes.spamrate !== -1 ? (row[columnIndexes.spamrate] * 100).toFixed(2) : '';
        var orderrate = columnIndexes.orderrate !== -1 ? (row[columnIndexes.orderrate] * 100).toFixed(2) : '';
        var order = columnIndexes.order !== -1 ? formatNumber(row[columnIndexes.order]) : '';
        var bounce = columnIndexes.bounce !== -1 ? formatNumber(row[columnIndexes.bounce]) : '';
        var bouncerate = columnIndexes.bouncerate !== -1 ? (row[columnIndexes.bouncerate] * 100).toFixed(2) : '';

        // –ó–∞–ø—Ä–æ—Å –∫ API dashamail.com
        var campaignId = row[columnIndexes.campaignId];
        var apiUrl = "https://api.dashamail.com/?api_key=" + apidasha + "&method=raw.select&query=SELECT url_original, COUNT(DISTINCT email) as quantity FROM dm.raw_data WHERE event_type = 'CLICKED' AND campaign_id IN (" + campaignId + ") GROUP BY url_original ORDER BY quantity DESC LIMIT 3";
        var response = UrlFetchApp.fetch(apiUrl);
        var responseData = JSON.parse(response.getContentText());

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º—ã–º–∏ –ø—Ä–æ–∫–ª–∏–∫–∏–≤–∞–µ–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        var topLinksMsg = "–ê –≤–æ—Ç —Å–∞–º—ã–µ –ø—Ä–æ–∫–ª–∏–∫–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:\n";
        responseData.response.data.forEach(function(linkData) {
          topLinksMsg += removeUTMParams(linkData.url_original) + " ‚Äî " + linkData.quantity + "\n";
        });

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        var message = "–ô–æ–ø, –≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ü–æ–º–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–µ–º–æ–π <a href=\"" + row[columnIndexes.link] + "\">¬´" + subject + "¬ª</a>? –ü—Ä–∏–Ω–µ—Å –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n";
        
        if (sended) message += "–û—Ç–ø—Ä–∞–≤–æ–∫ ‚Äî " + sended + "\n";
        if (open) message += "–û—Ç–∫—Ä—ã—Ç–∏–π ‚Äî " + open + " (" + openrate + "%)\n";
        if (click) message += "–ö–ª–∏–∫–æ–≤ ‚Äî " + click + " (" + clickrate + "%)\n";
        if (unsub) message += "–û—Ç–ø–∏—Å–æ–∫ ‚Äî " + unsub + " (" + unsubrate + "%)\n";
        if (spam) message += "–ñ–∞–ª–æ–± –Ω–∞ —Å–ø–∞–º ‚Äî " + spam + " (" + spamrate + "%)\n";
        if (bounce) message += "–í–æ–∑–≤—Ä–∞—Ç–æ–≤ ‚Äî " + bounce + " (" + bouncerate + "%)\n";
        if (order) message += "\n–ó–∞–∫–∞–∑–æ–≤ ‚Äî " + order + " (" + orderrate + "%)\n";
        if (income) message += "–î–æ—Ö–æ–¥ ‚Äî " + income + " ‚ÇΩ\n";
        
        message += "\n" + topLinksMsg + "\n–ù–∞–¥–µ—é—Å—å, –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å. –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! ‚ù§";
        send(message, defchatid);
      }
    }
  });
}



function removeUTMParams(url) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
  return url.replace(/(\?|&)utm_campaign=[^&]+/g, '')
            .replace(/(\?|&)utm_medium=[^&]+/g, '')
            .replace(/(\?|&)utm_source=[^&]+/g, '')
            .replace(/(\?|&)utm_term=[^&]+/g, '')
            .replace(/(\?|&)roistat=[^&]+/g, '')
            .replace(/&$/, '') // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ü–µ URL, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            .replace(/(\?|&)$/, ''); // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –∏–ª–∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥ –≤ –∫–æ–Ω—Ü–µ URL, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
}

function pluralize(num) {
  var forms = ['–ø–æ–∫—É–ø–∫–∞', '–ø–æ–∫—É–ø–∫–∏', '–ø–æ–∫—É–ø–æ–∫'];
  var cases = [2, 0, 1, 1, 1, 2];
  var index = num % 100 > 4 && num % 100 < 20 ? 2 : cases[Math.min(num % 10, 5)];
  return num + ' ' + forms[index];
}

function Olegobnovi(chat_id) {
  try {
        send("–Ø –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏", chat_id)
        autodate();
        send("–Ø –ø–µ—Ä–µ—Ö–æ–∂—É –∫ –º–µ—Ç—Ä–∏–∫–µ", chat_id)
        metrika();
        send("–Ø –∑–∞–∫–æ–Ω—á–∏–ª", chat_id)
        send("–£–∂–µ —Å–¥–µ–ª–∞–ª. –ü—Ä–æ–≤–µ—Ä—è–π –≤ —Ç–∞–±–ª–∏—Ü–µ: "+ link +" ‚ù§", chat_id)
        } catch { send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —á—É–¥–æ–≤–∏—â–Ω–∞—è –æ—à–∏–±–∫–∞ –∏ —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–π–º-–ø–ª–∞–Ω, –Ω–æ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å üò•", chat_id)}
}

function formatNumber(number) {
  if (number < 10000) {
    return number.toString();
  } else {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
  }
}
